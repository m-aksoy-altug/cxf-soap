package com.cxf.soap;

import org.apache.cxf.jaxws.EndpointImpl;

import com.cxf.soap.service.DummyImpl;

import jakarta.xml.ws.Endpoint;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


//CXF-based SOAP server
public class SoapServer {
	  private static final Logger log= LoggerFactory.getLogger(SoapServer.class);
	// Apache CXF is a JAX-WS fully compliant framework. Java Api for XML Web Service
	// http://192.168.1.113:8080/dummy?wsdl, returns the WSDL that describes
	// services, and clients can use this to generate stubs.
	// http://192.168.1.113:8080/dummy, actual endpoint where clients send SOAP requests with xml in bodd. 
	// clean install compile exec:java -Dexec.mainClass="com.camel.soap.SoapServer"
	public static void main(String[] args) {
		DummyImpl implementor = new DummyImpl();
//		String address = "http://localhost:8080/dummy";
		String address = "http://192.168.1.113:8080/dummy";
	    // EndpointImpl endpoint = (EndpointImpl) Endpoint.publish(address, implementor);
		Endpoint.publish(address, implementor);
		log.info("CXF SOAP server is running at " + address + "?wsdl");
	    try {
            Thread.sleep(10 * 60 * 1000); // 10 mins
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
	    log.info("CXF SOAP server is stoping");
	}

}

// In order to deploy the web service discussed above, we will make use of the
// standard JAX-WS APIs. Since we are using Apache CXF, the framework does some
// extra work, e.g. generating and publishing the WSDL schema. Here is how the
// service server is defined:
// The mainClass configuration refers to the Server class where the web service
// endpoint is published. After running the java goal of this plugin, we can
// check out the WSDL schema automatically generated by Apache CXF by accessing
// the URL
